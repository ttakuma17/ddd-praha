plugins {
	id 'org.springframework.boot'
	id 'jacoco'
	id 'checkstyle'
	id 'com.github.spotbugs' version '6.2.1'
	id "org.dddjava.jig-gradle-plugin" version '2025.5.1'
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.4'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'
	// Otel 導入
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-tracing-bridge-otel'
	implementation 'io.opentelemetry:opentelemetry-exporter-otlp'
	implementation 'io.opentelemetry.instrumentation:opentelemetry-logback-appender-1.0:1.33.0-alpha'
	implementation 'io.opentelemetry:opentelemetry-sdk'

	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.springframework.amqp:spring-rabbit-test'
	testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.4'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
	testImplementation 'org.testcontainers:rabbitmq'
	testImplementation 'com.tngtech.archunit:archunit-junit5:1.4.1'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


tasks.named('bootTestRun') {
	args = ['--spring.profiles.active=dev']
}

// JaCoCo configuration
jacoco {
	toolVersion = "0.8.12"
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
		csv.required = false
	}
	executionData.setFrom(fileTree(dir: "${layout.buildDirectory}/jacoco", includes: ["**/*.exec"]))
}

jacocoTestCoverageVerification {
	dependsOn jacocoTestReport
	violationRules {
		rule {
			limit {
				minimum = 0.80
			}
		}
	}
}

// Checkstyle configuration
checkstyle {
	toolVersion = '10.12.4'
	configFile = file("${projectDir}/config/checkstyle/checkstyle.xml")
	ignoreFailures = true
}

checkstyleMain {
	source = sourceSets.main.allJava
}

checkstyleTest {
	source = sourceSets.test.allJava
}

// SpotBugs configuration
spotbugs {
	toolVersion = '4.8.6'
	ignoreFailures = true
	effort = 'max'
	reportLevel = 'medium'
}

spotbugsMain {
	reports {
		xml.required = true
		html.required = true
	}
}

spotbugsTest {
	reports {
		xml.required = true
		html.required = true
	}
}

// Task dependencies
test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification
